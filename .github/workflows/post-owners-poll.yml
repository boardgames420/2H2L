name: Post Owners Poll

on:
  schedule:
    - cron: "0 8 * * *"  # 09:00 CET (08:00 UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  post_poll:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq and curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Check if today is 3 days before the next event (UTC)
        id: check_event_day
        run: |
          set -euo pipefail
          NEXT_EVENT_DATE=$(jq -r '.date' events/upcoming.json)  # e.g., 2025-09-06
          TODAY_UTC=$(date -u +%F)
          TARGET_DAY_UTC=$(date -u -d "$NEXT_EVENT_DATE -3 days" +%F)

          echo "Next event date: $NEXT_EVENT_DATE"
          echo "Today (UTC):    $TODAY_UTC"
          echo "Target (UTC):   $TARGET_DAY_UTC"

          if [ "$TODAY_UTC" = "$TARGET_DAY_UTC" ]; then
            echo "should_post=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_post=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Exit if not time to post
        if: steps.check_event_day.outputs.should_post != 'true'
        run: exit 0

      - name: Delete previous messages from channel
        if: steps.check_event_day.outputs.should_post == 'true'
        env:
          TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          CHANNEL_ID: ${{ secrets.DISCORD_OWNERS_CHANNEL_ID }}
        run: |
          set -euo pipefail
          MESSAGES=$(curl -s -H "Authorization: Bot $TOKEN" \
            "https://discord.com/api/v10/channels/$CHANNEL_ID/messages?limit=100")

          echo "$MESSAGES" | jq -r '.[].id' | while read -r ID; do
            [ -z "$ID" ] && continue
            curl -s -X DELETE "https://discord.com/api/v10/channels/$CHANNEL_ID/messages/$ID" \
              -H "Authorization: Bot $TOKEN" >/dev/null
            sleep 0.5
          done

      - name: Build and post availability poll
        if: steps.check_event_day.outputs.should_post == 'true'
        env:
          TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          CHANNEL_ID: ${{ secrets.DISCORD_OWNERS_CHANNEL_ID }}
        run: |
          set -euo pipefail
          mkdir -p .tmp
          jq -r '.[]' games/owners.json > .tmp/owners_list.txt

          EMOJIS=(ðŸ‡¦ ðŸ‡§ ðŸ‡¨ ðŸ‡© ðŸ‡ª ðŸ‡« ðŸ‡¬ ðŸ‡­ ðŸ‡® ðŸ‡¯ ðŸ‡° ðŸ‡± ðŸ‡² ðŸ‡³ ðŸ‡´ ðŸ‡µ ðŸ‡¶ ðŸ‡· ðŸ‡¸ ðŸ‡¹ ðŸ‡º ðŸ‡» ðŸ‡¼ ðŸ‡½ ðŸ‡¾ ðŸ‡¿)
          i=0

          echo -e "ðŸ§© **Game Owners â€“ Will you be there next time?**\n\nReact with your emoji to confirm:\n" > owner_poll_message.txt

          while read -r OWNER; do
            [ -z "$OWNER" ] && continue
            EMOJI="${EMOJIS[i]}"
            echo -e "${EMOJI} ${OWNER}\n" >> owner_poll_message.txt
            i=$((i + 1))
          done < .tmp/owners_list.txt

          # If no owners, do NOT send anything
          if [ $i -eq 0 ]; then
            echo "No owners found. Exiting without sending."
            exit 0
          fi

          MSG_CONTENT=$(jq -Rs . < owner_poll_message.txt | sed 's/\\\\n/\\n/g')

          RESPONSE=$(curl -s -X POST "https://discord.com/api/v10/channels/$CHANNEL_ID/messages" \
            -H "Authorization: Bot $TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"content\": $MSG_CONTENT}")

          echo "$RESPONSE" > .owner_poll_response.json
          MESSAGE_ID=$(jq -r '.id' .owner_poll_response.json)

          if [ "$MESSAGE_ID" = "null" ] || [ -z "$MESSAGE_ID" ]; then
            echo "Failed to post owners poll; not recording poll date."
            cat .owner_poll_response.json
            exit 1
          fi

          i=0
          while read -r OWNER; do
            [ -z "$OWNER" ] && continue
            EMOJI="${EMOJIS[i]}"
            ENCODED=$(printf "%s" "$EMOJI" | jq -sRr @uri)
            curl -s -X PUT "https://discord.com/api/v10/channels/$CHANNEL_ID/messages/${MESSAGE_ID}/reactions/${ENCODED}/@me" \
              -H "Authorization: Bot $TOKEN" >/dev/null
            sleep 0.2
            i=$((i + 1))
          done < .tmp/owners_list.txt

      - name: Commit poll record
        if: steps.check_event_day.outputs.should_post == 'true'
        run: |
          set -euo pipefail
          NEXT_EVENT_DATE=$(jq -r '.date' events/upcoming.json)
          echo "$NEXT_EVENT_DATE" > .last_owners_poll

          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .last_owners_poll
          git commit -m "ðŸ“Œ Record last owners poll date" || echo "No changes"
          git push
